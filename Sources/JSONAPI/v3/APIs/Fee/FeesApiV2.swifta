import Foundation
import DLJSONAPI

class FeesApiV2: BaseApiV2 {
    
    // MARK: - Public properties
    
    public let requestBuilder: FeesRequestBuilderV2
    
    // MARK: -
    
    override init(apiStack: BaseApiStackV2) {
        self.requestBuilder = FeesRequestBuilderV2(
            builderStack: BaseApiRequestBuilderStackV2.fromApiStack(apiStack)
        )
        
        super.init(apiStack: apiStack)
    }
    
    // MARK: - Public
    
    /// Method sends request to get fees from api.
    /// The result of request will be fetched in `completion`
    /// - Parameters:
    ///   - pagination: Pagination option.
    ///   - completion: Block that will be called when the result will be received.
    ///     - result: Member of `RequestCollectionResult<FeeResource>`
    /// - Returns: `Cancelable`
    @discardableResult
    public func requestFees(
        pagination: RequestPagination,
        completion: @escaping (RequestCollectionResult<FeeResource>) -> Void
        ) -> Cancelable {
        
        var cancellable = self.network.getEmptyCancelable()
        
        self.requestBuilder.buildFeesRequest(
            completion: { [weak self] (request) in
                guard let request = request else {
                    completion(.failure(JSONAPIError.failedToSignRequest))
                    return
                }
                
                cancellable.cancelable = self?.responseDocumentCollection(
                    FeeResource.self,
                    request: request,
                    completion: completion
                )
        })
        
        return cancellable
    }
}
